
docker-compose up -d

docker-compose down
docker-compose down --volumes

1.ダウンロード
https://www.oracle.com/jp/database/technologies/oracle-database-software-downloads.html


docker-imageのクローン作成
cd c:\
mkdir oracle
cd oracle
git clone https://github.com/oracle/docker-images.git

cd C:\oracle\docker-images\OracleDatabase\SingleInstance



move %USERPROFILE%\Downloads\LINUX.X64_193000_db_home.zip move %USERPROFILE%\Downloads\LINUX.X64_193000_db_home.zip .\dockerfiles\19.3.0
cd dockerfiles


cd /c/oracle/docker-images/OracleDatabase/SingleInstance/dockerfiles

./buildContainerImage.sh -v 19.3.0 -e -i
./buildContainerImage.sh -v 19.3.0 -s -i
./buildContainerImage.sh -v 18.4.0 -x -i

cp /mnt/c/Users/parap/Downloads/oracle-database-xe-18c-1.0-1.x86_64.rpm ./dockerfiles/18.6.0/


docker run --name oracle-19.3.0-ee  -p 1521:1521 -p 5500:5500 -e ORACLE_SID=ORCLCDB -e ORACLE_PDB=ORCLPDB -e ORACLE_PWD=manager oracle/database:19.3.0-ee
docker run --name oracle-19.3.0-se2 -p 1521:1521 -p 5500:5500 -e ORACLE_SID=ORCLCDB -e ORACLE_PDB=ORCLPDB -e ORACLE_PWD=manager oracle/database:19.3.0-se2
docker run --name oracle-18.4.0-xe  -p 1521:1521 -p 5500:5500 -e ORACLE_PWD=manager oracle/database:18.4.0-xe


#コンテナの操作はsshではなく、docker execで行う
docker exec -ti oracle-18.4.0-xe /bin/bash
docker exec -ti oracle-19.3.0-ee /bin/bash
docker exec -ti oracle-19.3.0-se2 /bin/bash


#DBへの接続

sqlplus sys/manager@//localhost:1521/XE as sysdba
sqlplus system/manager@//localhost:1521/XE
sqlplus pdbadmin/manager@//localhost:1521/XEPDB1
sqlplus system/manager@localhost:1521/ORCLCDB

docker exec -it orcl bash

USE_SID_AS_SERVICE_LISTENER = ON

docker system prune

# コンテナに紐づいてないvolumeを削除する
docker volume prune



----------------------------------------
sqlplus demo/demo@localhost:1521/ORCLCDB


sqlplus system/manager@localhost:1521/ORCLCDB
conn / as sysdba

# 今接続しているコンテナ名を確認する(CDBに接続してる状態)
SHOW con_name;

# PDB名を調べる
SELECT pdb_name FROM cdb_pdbs;

# PDBに接続する
ALTER SESSION SET container = ORCLPDB;

CREATE USER demo IDENTIFIED BY demo DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp;

# テスト環境のためDBA ロールの付与と表領域の使用量を無制限に設定
GRANT DBA TO demo;
GRANT UNLIMITED TABLESPACE TO demo;
